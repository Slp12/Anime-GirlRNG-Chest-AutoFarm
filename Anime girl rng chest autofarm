local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "🌸Anime Girl RNG🌸",
   LoadingTitle = "Hello!!",
   LoadingSubtitle = "Made By SLPGANGO",
   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "SLPGIRLHUB"
   },
   Discord = {
      Enabled = false,
      Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },
   KeySystem = false, -- Set this to true to use our key system
   KeySettings = {
      Title = "Untitled",
      Subtitle = "Key System",
      Note = "No method of obtaining the key is provided",
      FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"Hello"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})

local MainTab = Window:CreateTab("🚜Auto Farm🚜", nil) -- Title, Image
local MainSection = MainTab:CreateSection("Farming")

local player = game.Players.LocalPlayer
local autoFarmEnabled = false
local autoFarmCoroutine
local autoUsePotionsEnabled = false
local autoUsePotionsCoroutine
local fastRollEnabled = false
local fastRollCoroutine
local antiAfkEnabled = false

-- Function to teleport the player
local function teleportToPosition(position)
    if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
        player.Character.HumanoidRootPart.CFrame = CFrame.new(position)
    end
end

-- Function to interact with the proximity prompt
local function interactWithProximityPrompt()
    if player.Character then
        local rootPart = player.Character:FindFirstChild("HumanoidRootPart")
        if rootPart then
            for _, prompt in pairs(workspace:GetDescendants()) do
                if prompt:IsA("ProximityPrompt") and (prompt.Parent.Position - rootPart.Position).magnitude < 10 then
                    local startTime = tick()
                    while tick() - startTime < 2 do
                        fireproximityprompt(prompt)
                        wait(0.1)
                    end
                end
            end
        end
    end
end

-- Main Auto Farm Loop
local function autoFarm()
    while autoFarmEnabled do
        teleportToPosition(Vector3.new(138.8249969482422, -85.32718658447266, -264.0798034667969)) -- New Position 1
        wait(3)
        interactWithProximityPrompt()
        wait(5)

        teleportToPosition(Vector3.new(18.954509735107422, -87.82718658447266, -26.414854049682617)) -- New Position 2
        wait(3)
        wait(5)

        teleportToPosition(Vector3.new(150.5713653564453, -87.82718658447266, 11.388805389404297)) -- New Position 3
        wait(3)

        teleportToPosition(Vector3.new(171.6957244873047, -85.32718658447266, -62.29244613647461)) -- New Position 4
        wait(3)
        interactWithProximityPrompt()

        wait(20)
    end
end

-- Function to auto-use potions
local function autoUsePotions()
    while autoUsePotionsEnabled do
        local args = {

    [1] = "remove",
    [2] = "Weak Starpurge",
        }
        game.ReplicatedStorage.CORE_RemoteEvents.SendSellRequest:FireServer(unpack(args))
        
        -- Use "Mega Sunburst" potion
        local args = {
            [1] = "use_potion",
            [2] = "Mega Sunburst"
        }
        game:GetService("ReplicatedStorage").CORE_RemoteEvents.SendEquipRequest:FireServer(unpack(args))
        
        -- Notify the user
        Rayfield:Notify({
            Title = "Potion Used",
            Content = "Using a potion...",
            Duration = 2,
            Image = 4483362458,
        })
        
        -- Wait for 5 minutes before using the next potion
        wait(300)
    end
end

-- Function to handle Fast Roll
local function fastRoll()
    while fastRollEnabled do
        game:GetService("ReplicatedStorage").CORE_RemoteEvents.SendSummonRequest:FireServer(5)
        wait()
    end
end

-- Function to handle Anti AFK
local function toggleAntiAfk()
    if antiAfkEnabled then
        -- Anti AFK Functionality
        local virtualUser = game:GetService("VirtualUser")

        game:GetService("Players").LocalPlayer.Idled:Connect(function()
            virtualUser:CaptureController()
            virtualUser:ClickButton2(Vector2.new())
        end)

        Rayfield:Notify({
            Title = "Anti AFK",
            Content = "Anti AFK enabled.",
            Duration = 2,
            Image = 4483362458,
        })
    else
        Rayfield:Notify({
            Title = "Anti AFK",
            Content = "Anti AFK disabled.",
            Duration = 2,
            Image = 4483362458,
        })
    end
end

-- Function to start or stop auto farming
local function toggleAutoFarm()
    autoFarmEnabled = not autoFarmEnabled
    if autoFarmEnabled then
        Rayfield:Notify({
            Title = "Auto Farm",
            Content = "Auto farm enabled.",
            Duration = 2,
            Image = 4483362458,
        })
        autoFarmCoroutine = coroutine.create(autoFarm)
        coroutine.resume(autoFarmCoroutine)
    else
        Rayfield:Notify({
            Title = "Auto Farm",
            Content = "Auto farm disabled.",
            Duration = 2,
            Image = 4483362458,
        })
        if autoFarmCoroutine then
            coroutine.yield(autoFarmCoroutine)
            autoFarmCoroutine = nil
        end
    end
end

-- Integration with the toggle for auto farm
local Toggle = MainTab:CreateToggle({
   Name = "Chest Farm",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
       autoFarmEnabled = Value
       if autoFarmEnabled then
           Rayfield:Notify({
               Title = "Auto Farm",
               Content = "Auto farm enabled.",
               Duration = 2,
               Image = 4483362458,
           })
           autoFarmCoroutine = coroutine.create(autoFarm)
           coroutine.resume(autoFarmCoroutine)
       else
           Rayfield:Notify({
               Title = "Auto Farm",
               Content = "Auto farm disabled.",
               Duration = 2,
               Image = 4483362458,
           })
           if autoFarmCoroutine then
               coroutine.yield(autoFarmCoroutine)
               autoFarmCoroutine = nil
           end
       end
   end,
})

local Section = MainTab:CreateSection("⚗️Potions⚗️")

-- Button to buy "Broken Dreams" potion
local Button = MainTab:CreateButton({
   Name = "Buy Broken Dreams Potion ✅",
   Callback = function()
       local args = {
           [1] = "Broken Dreams"
       }
       game:GetService("ReplicatedStorage").CORE_RemoteEvents.SendPurchaseRequest:FireServer(unpack(args))
       Rayfield:Notify({
           Title = "Purchase",
           Content = "Purchased Broken Dreams Potion.",
           Duration = 2,
           Image = 4483362458,
       })
   end,
})

-- Button to buy "Mega Sunburst" potion
local Button = MainTab:CreateButton({
   Name = "Buy Mega Sunburst Potion ✅",
   Callback = function()
       local args = {
           [1] = "Mega Sunburst"
       }
       game:GetService("ReplicatedStorage").CORE_RemoteEvents.SendPurchaseRequest:FireServer(unpack(args))
       Rayfield:Notify({
           Title = "Purchase",
           Content = "Purchased Mega Sunburst Potion.",
           Duration = 2,
           Image = 4483362458,
       })
   end,
})

-- Integration with the toggle for auto-use potions
local Toggle = MainTab:CreateToggle({
   Name = "⚗️Auto Use Potions⚗️",
   CurrentValue = false,
   Flag = "Toggle2", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
       autoUsePotionsEnabled = Value
       if autoUsePotionsEnabled then
           Rayfield:Notify({
               Title = "Auto Use Potions",
               Content = "Auto use potions enabled.",
               Duration = 2,
               Image = 4483362458,
           })
           autoUsePotionsCoroutine = coroutine.create(autoUsePotions)
           coroutine.resume(autoUsePotionsCoroutine)
       else
           Rayfield:Notify({
               Title = "Auto Use Potions",
               Content = "Auto use potions disabled.",
               Duration = 2,
               Image = 4483362458,
           })
           if autoUsePotionsCoroutine then
               coroutine.yield(autoUsePotionsCoroutine)
               autoUsePotionsCoroutine = nil
           end
       end
   end,
})

local Section = MainTab:CreateSection("🔄Summon🔄")

-- Integration with the toggle for Fast Roll
local Toggle = MainTab:CreateToggle({
   Name = "Fast Roll",
   CurrentValue = false,
   Flag = "Toggle3", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
       fastRollEnabled = Value
       if fastRollEnabled then
           Rayfield:Notify({
               Title = "Fast Roll",
               Content = "Fast roll enabled.",
               Duration = 2,
               Image = 4483362458,
           })
           fastRollCoroutine = coroutine.create(fastRoll)
           coroutine.resume(fastRollCoroutine)
       else
           Rayfield:Notify({
               Title = "Fast Roll",
               Content = "Fast roll disabled.",
               Duration = 2,
               Image = 4483362458,
           })
           if fastRollCoroutine then
               coroutine.yield(fastRollCoroutine)
               fastRollCoroutine = nil
           end
       end
   end,
})

-- Integration with the toggle for anti AFK
local Toggle = MainTab:CreateToggle({
   Name = "Anti AFK",
   CurrentValue = false,
   Flag = "Toggle4", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
       antiAfkEnabled = Value
       toggleAntiAfk()
   end,
})
